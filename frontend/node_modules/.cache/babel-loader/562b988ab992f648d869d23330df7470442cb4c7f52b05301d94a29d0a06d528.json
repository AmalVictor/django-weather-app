{"ast":null,"code":"var _jsxFileName = \"C:\\\\weather_dashboard\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport * as api from '../services/api';\n\n// Create the context with default values\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  isAuthenticated: false,\n  login: async () => {},\n  register: async () => {},\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if the user is already logged in on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        if (localStorage.getItem('token')) {\n          const user = await api.getCurrentUser();\n          setUser(user);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Authentication check failed:', error);\n        localStorage.removeItem('token');\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    try {\n      const data = await api.login(username, password);\n      localStorage.setItem('token', data.token);\n      setUser(data.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  };\n\n  // Register function\n  const register = async (username, email, password) => {\n    try {\n      const data = await api.register(username, email, password);\n      localStorage.setItem('token', data.token);\n      setUser(data.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Registration failed:', error);\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    try {\n      api.logout();\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Uq7KcTiOseX3k63CKoUNgtSkdNA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","user","isAuthenticated","login","register","logout","AuthProvider","children","_s","setUser","setIsAuthenticated","checkAuth","localStorage","getItem","getCurrentUser","error","console","removeItem","username","password","data","setItem","token","email","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/weather_dashboard/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, AuthContextType } from '../types';\r\nimport * as api from '../services/api';\r\n\r\n// Create the context with default values\r\nexport const AuthContext = createContext<AuthContextType>({\r\n  user: null,\r\n  isAuthenticated: false,\r\n  login: async () => {},\r\n  register: async () => {},\r\n  logout: () => {}\r\n});\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\r\n\r\n  // Check if the user is already logged in on mount\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        if (localStorage.getItem('token')) {\r\n          const user = await api.getCurrentUser();\r\n          setUser(user);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Authentication check failed:', error);\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      const data = await api.login(username, password);\r\n      localStorage.setItem('token', data.token);\r\n      setUser(data.user);\r\n      setIsAuthenticated(true);\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (username: string, email: string, password: string) => {\r\n    try {\r\n      const data = await api.register(username, email, password);\r\n      localStorage.setItem('token', data.token);\r\n      setUser(data.user);\r\n      setIsAuthenticated(true);\r\n    } catch (error) {\r\n      console.error('Registration failed:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    try {\r\n      api.logout();\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    } catch (error) {\r\n      console.error('Logout failed:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}